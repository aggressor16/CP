#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

template <const int mod>
class ModInt {
  public:
  int32_t value = 0;

  ModInt() = default;
  template <typename U>
  int32_t normalize(U number) {
    if (number < -mod || mod << 1 < number) {
      number %= mod;
    }
    if (number >= mod) {
      number -= mod;
    }
    if (number < 0) {
      number += mod;
    }
    return static_cast <int> (number);
  }

  template <typename U>
  ModInt(const U number) {
    value = normalize(number);
  }

  ModInt <mod> power(uint64_t b) {
    assert(b >= 0);
    ModInt <mod> res = 1;
    ModInt <mod> a = *this;
    while (b > 0) {
      if (b & 1) res *= a;
      a *= a;
      b >>= 1;
    }
    return res;
  }

  inline ModInt <mod> operator - () {
    ModInt <mod> res;
    if (this->value > 0) {
      res.value = mod - this->value;
    }
    return res;
  }

  inline ModInt <mod> operator + (const ModInt <mod> other) {
    ModInt <mod> res;
    res.value = this->value + other.value;
    if (res.value >= mod) {
      res.value -= mod;
    }
    return res;
  }

  ModInt <mod> inverse() {
    return power(mod - 2);
  }

  inline ModInt <mod> operator - (const ModInt <mod> other) {
    ModInt <mod> res;
    res.value = this->value - other.value;
    if (res.value < 0) {
      res.value += mod;
    }
    return res;
  }

  inline ModInt <mod> operator * (const ModInt <mod> &other) {
    return ModInt <mod> ((uint64_t)this->value * other.value);
  }

  inline ModInt <mod> operator / (const ModInt <mod> &other) {
    return ModInt <mod> ((uint64_t)this->value * other.inverse().value);
  }

  inline ModInt <mod> &operator = (const ModInt <mod> &other) {
    this->value = other.value;
    return *this;
  }

  inline ModInt <mod> &operator += (const ModInt <mod> &other) {
    this->value += other.value;
    if (this->value >= mod) {
      this->value -= mod;
    }
    return *this;
  }

  inline ModInt <mod> &operator -= (const ModInt <mod> &other) {
    this->value -= other.value;
    if (this->value < 0) {
      this->value += mod;
    }
    return *this;
  }

  inline ModInt <mod> &operator *= (const ModInt <mod> &other) {
    this->value = normalize((uint64_t)this->value * other.value);
    return *this;
  }

  inline ModInt <mod> &operator /= (const ModInt <mod> &other) {
    this->value = normalize((uint64_t)this->value * other.inverse().value);
    return *this;
  }

  inline ModInt <mod> &operator ++() {
    return *this += 1;
  }

  inline ModInt <mod> &operator --() {
    return *this -= 1;
  }

  inline bool operator == (const ModInt <mod> &other) {
    return this->value == other.value;
  }

  inline bool operator != (const ModInt <mod> &other) {
    return this->value != other.value;
  }

  inline bool operator < (const ModInt <mod> &other) {
    return this->value < other.value;
  }

  inline bool operator > (const ModInt <mod> &other) {
    return this->value > other.value;
  }

  inline bool operator <= (const ModInt <mod> &other) {
    return !(*this > other);
  }

  inline bool operator >= (const ModInt <mod> &other) {
    return !(*this < other);
  }

  template <typename U>
  inline ModInt <mod> operator + (const U number) {
    return *this + ModInt <mod> (number);
  }

  template <typename U>
  inline ModInt <mod> operator - (const U number) {
    return *this - ModInt <mod> (number);
  }

  template <typename U>
  inline ModInt <mod> operator * (const U number) {
    return *this * ModInt <mod> (number);
  }

  template <typename U>
  inline ModInt <mod> operator / (const U number) {
    return *this / ModInt <mod> (number);
  }

  template <typename U>
  inline ModInt <mod> &operator = (const U number) {
    this->value = normalize(number);
    return *this;
  }

  template <typename U>
  inline ModInt <mod> &operator += (const U number) {
    return *this += ModInt <mod> (number);
  }

  template <typename U>
  inline ModInt <mod> &operator -= (const U number) {
    return *this -= ModInt <mod> (number);
  }

  template <typename U>
  inline ModInt <mod> &operator *= (const U number) {
    return *this *= ModInt <mod> (number);
  }

  template <typename U>
  inline ModInt <mod> &operator /= (const U number) {
    return *this /= ModInt <mod> (number);
  }

  template <typename U>
  inline bool operator == (const U number) {
    return this->value == normalize(number);
  }

  template <typename U>
  inline bool operator != (const U number) {
    return this->value != normalize(number);
  }

  template <typename U>
  inline bool operator < (const U number) {
    return this->value < normalize(number);
  }

  template <typename U>
  inline bool operator > (const U number) {
    return this->value > normalize(number);
  }

  template <typename U>
  inline bool operator <= (const U number) {
    return !(*this > number);
  }

  template <typename U>
  inline bool operator >= (const U number) {
    return !(*this < number);
  }
};

template <const int mod>
istream &operator >> (istream &in, ModInt <mod> &v) {
  return in >> v.value;
}

template <const int mod>
ostream &operator << (ostream &out, const ModInt <mod> v) {
  return out << v.value;
}

constexpr int MOD = 1e9 + 7;
using Mint = ModInt <MOD>;

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
