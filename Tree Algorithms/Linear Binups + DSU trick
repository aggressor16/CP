#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

class Lca_Forest {
public:
  int n;
  vector <int> jump;
  vector <int> depth;
  vector <int> parent;

  Lca_Forest(int _n) : n(_n) {
    jump.resize(n);
    depth.resize(n);
    parent.resize(n);
  }

  void add_leaf(int par, int v, int cost = 1) {
    parent[v] = par;
    depth[v] = depth[par] + 1;
    if (depth[par] - depth[jump[par]] == depth[jump[par]] - depth[jump[jump[par]]]) {
      jump[v] = jump[jump[par]];
    } else {
      jump[v] = par;
    }
  }

  int level_ancestor(int v, int k) {
    int h = max(depth[v] - k, 0);
    while (depth[v] != h) {
      if (depth[jump[v]] >= h) {
        v = jump[v];
      } else {
        v = parent[v];
      }
    }
    return v;
  }

  int lca(int u, int v) {
    if (depth[u] > depth[v]) {
      u = level_ancestor(u, depth[u] - depth[v]);
    } else {
      v = level_ancestor(v, depth[v] - depth[u]);
    }
    while (u != v) {
      if (jump[u] != jump[v]) {
        u = jump[u];
        v = jump[v];
      } else {
        u = parent[u];
        v = parent[v];
      }
    }
    return v;
  }
};

class Dsu {
public:
  vector <int> parent;
  vector <int> weight;
  vector <int> min_number;

  Dsu(int n) {
    parent.resize(n);
    weight.assign(n, 1);
    min_number.resize(n);
    iota(parent.begin(), parent.end(), 0);
    iota(min_number.begin(), min_number.end(), 0);
  }

  inline int get(int v) {
    if (parent[v] != v) {
      parent[v] = get(parent[v]);
    }
    return parent[v];
  }

  inline void unite(int x, int y) {
    x = get(x);
    y = get(y);
    if (x == y) {
      return;
    }
    if (weight[x] > weight[y]) {
      swap(x, y);
    }
    parent[x] = y;
    weight[y] += weight[x];
    min_number[y] = min(min_number[y], min_number[x]);
  }
};

void run_case() {
  int q;
  cin >> q;

  int vertices = 1;
  Lca_Forest g(q);
  Dsu d(q);


  while (q--) {
    char t;
    cin >> t;
    if (t == '+') {
      int v;
      cin >> v;
      g.add_leaf(v - 1, vertices++);
    } else if (t == '-') {
      int v;
      cin >> v;
      d.unite(v - 1, g.parent[v - 1]);
    } else {
      int u, v;
      cin >> u >> v;
      --u; --v;
      int anc = d.get(g.lca(u, v));
      cout << d.min_number[anc] + 1 << "\n";
    }
  }
}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
