vector <int> topological_sort(const vector <vector <int>> &g) {
  int n = (int)g.size();
  bool acyclic = true;
  vector <int> res;
  vector <int> color(n);
  function <void(int)> dfs_1 = [&](int v) {
    color[v] = 1;
    for (int to : g[v]) {
      if (!color[to]) {
        dfs_1(to);
      }
      acyclic &= color[to] != 1;
    }
    color[v] = 2;
  };
  for (int i = 0; i < n; ++i) {
    if (!color[i]) {
      dfs_1(i);
    }
  }
  if (acyclic) {
    res.reserve(n);
    vector <bool> used(n);
    function <void(int)> dfs_2 = [&](int v) {
      used[v] = true;
      for (int to : g[v]) {
        if (!used[to]) {
          dfs_2(to);
        }
      }
      res.push_back(v);
    };
    for (int i = 0; i < n; ++i) {
      if (!used[i]) {
        dfs_2(i);
      }
    }
    reverse(res.begin(), res.end());
  }
  return res;
}
