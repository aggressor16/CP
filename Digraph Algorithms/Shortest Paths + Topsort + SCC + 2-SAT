#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

/*Topological Sort:
Yields permutation of vertices p[0], p[i], ..., p[n - 1] with following condition:
for every edge (from, to) in digraph from will be earlier than to in topsort array.
If digraph is non-acyclic, yields an empty vector.

SCC and 2-SAT:
Task: Given n booleans and several conditions like (a || b) && (!c -> d)....
We have to assign 0 or 1 to each boolean and make all conditions satisfied, or find out that there is no solution.
How will we solve that? Let's build a digraph on 2 * n vertices (vertex 2 * I correspond to ith boolean = false and 2 * i + 1 - to ith boolean = true)
and transform each condition to a couple of implication edges. Thus, we receive a digraph with O(n) vertices and O(m) edges
(since each condition decomposes to constant number of edges).
Let's find all strongly connected components in it. Strongly connected component (scc) is a max subset of vertices (let it be S),
 such that for each u, v (u ∈ S && v ∈ s) v is reachable from u and u is reachable from v. Let's denote c[i] as number of scc, which contains i.
So, what we've done? For each boolean i, let's look on pair of vertices 2 * i and 2 * i + 1. If they're reachable from each other(it means c[2 * i] == c[2 * i  +1]),
then no solution exists, because whichever value we assign to this boolean, we come to the contradiction.
Else, since scc's are top-sorted, it's quite easy to determine which value we have to assign.
If c[2 * i] < c[2 * i + 1], it means, that i = true is reachable from i = false, so, we have to assign 1 to this boolean, otherwise we have to assign 0.
Time complexity - O(n + m), since SCC searching algorithm is linear.

Dijkstra: finds an array of lengths of the shortest paths from given vertex s to all others vertices. Runs in O(E * log(V)).
Bonus: there is no problem to recover the paths, since we pass the parent array to procedure by reference.*/

template <typename T>
class graph {
public:
  struct edge {
    int from;
    int to;
    T cost;
  };

  int n;
  vector <edge> edges;
  vector <vector <int>> adj;

  graph() = default;
  explicit graph(int _n) {
    n = _n;
    adj.resize(_n);
  }

  inline void add(int from, int to, T cost = 1) {
    assert(0 <= from && from <= n - 1);
    assert(0 <= to && to <= n - 1);
    int id = (int)edges.size();
    edges.push_back({from, to, cost});
    adj[from].emplace_back(id);
    adj[to].emplace_back(id);
  }
};
template <typename T>
class digraph : public graph <T> {
public:
  using graph <T>::edges;
  using graph <T>::adj;
  using graph <T>::n;

  digraph() = default;
  digraph (int _n) : graph <T> (_n) {
  };

  inline void add(int from, int to, T cost = 1) {
    assert(0 <= from && from <= n - 1);
    assert(0 <= to && to <= n - 1);
    int id = (int)edges.size();
    adj[from].emplace_back(id);
    edges.push_back({from, to, cost});
  }

  digraph reverse() const {
    digraph <T> rev(n);
    for (auto &e : edges) {
      rev.add(e.to, e.from, e.cost);
    }
    return rev;
  }
};

template <typename T>
vector <int> topological_sort(const digraph <T> &g) {
  bool acyclic = true;
  vector <int> res;
  vector <int> color(g.n);
  function <void(int)> dfs_1 = [&](int v) {
    color[v] = 1;
    for (int id : g.g[v]) {
      auto &e = g.edges[id];
      int to = e.to;
      if (!color[to]) {
        dfs_1(to);
      }
      acyclic &= color[to] != 1;
    }
    color[v] = 2;
  };
  for (int i = 0; i < g.n; ++i) {
    if (!color[i]) {
      dfs_1(i);
    }
  }
  if (acyclic) {
    vector <bool> used(g.n);
    function <void(int)> dfs_2 = [&](int v) {
      used[v] = true;
      for (int id : g.g[v]) {
        auto &e = g.edges[id];
        int to = e.to;
        if (!used[to]) {
          dfs_2(to);
        }
      }
      res.emplace_back(v);
    };
    for (int i = 0; i < g.n; ++i) {
      if (!used[i]) {
        dfs_2(i);
      }
    }
    reverse(res.begin(), res.end());
  }
  return res;
}

template <typename T>
class Strongly_Connected_Components {
public:
  digraph <T> g;
  digraph <T> g_rev;
  vector <int> c;
  vector <bool> used;
  vector <int> order;

  Strongly_Connected_Components() = default;
  Strongly_Connected_Components(const digraph <T> &_g) {
    g = _g;
    used.resize(g.n);
    c.assign(g.n, -1);
    order.reserve(g.n);
    g_rev = g.reverse();
  }

  void dfs_1(int v) {
    used[v] = true;
    for (int id : g.adj[v]) {
      auto &e = g.edges[id];
      int to = e.to;
      if (!used[to]) {
        dfs_1(to);
      }
    }
    order.push_back(v);
  }

  void dfs_2(int v) {
    for (int id : g_rev.adj[v]) {
      auto &e = g_rev.edges[id];
      int to = e.to;
      if (c[to] == -1) {
        c[to] = c[v];
        dfs_2(to);
      }
    }
  }

  int scc_count = -1;
  vector <int> find_scc() {
    for (int i = 0; i < g.n; ++i) {
      if (!used[i]) {
        dfs_1(i);
      }
    }

    scc_count = 0;
    for (int i = g.n - 1; i >= 0; --i) {
      int v = order[i];
      if (c[v] != -1) {
        continue;
      }
      c[v] = scc_count++;
      dfs_2(v);
    }

    return c;
  }

  digraph <T> condensation() {
    assert(scc_count != -1);
    digraph <T> res(scc_count);
    vector <unordered_set <int>> was(scc_count); //have no idea how to get rid of this

    for (auto &e : g.edges) {
      if (c[e.from] == c[e.to]) {
        continue;
      }
      auto [iter, success] = was[c[e.from]].insert(c[e.to]);
      if (success) {
        res.add(c[e.from], c[e.to], e.cost);
      }
    }

    return res;
  }
};

class Two_Sat {
public:
  int n;
  digraph <int> g;
  Strongly_Connected_Components <int> SCC;
  Two_Sat (int _n) {
    n = _n;
    g = digraph <int> (2 * _n);
  }

  inline void add_clause(int x, int value_x, int y, int value_y) {
    assert(0 <= x && x <= n - 1 && 0 <= value_x && value_x <= 1);
    assert(0 <= y && y <= n - 1 && 0 <= value_y && value_y <= 1);
    g.add(2 * x + (value_x ^ 1), 2 * y + value_y);
    g.add(2 * y + (value_y ^ 1), 2 * x + value_x);
  }

  inline void implies(int x, int value_x, int y, int value_y) {
    add_clause(x, value_x ^ 1, y, value_y);
  }

  inline void set_value(int x, int value_x) {
    add_clause(x, value_x, x, value_x);
  }

  inline void at_most_one(int x, int value_x, int y, int value_y) {
    add_clause(x, value_x ^ 1, y, value_y ^ 1);
  }

  inline void exactly_one(int x, int value_x, int y, int value_y) {
    add_clause(x, value_x, y, value_y);
    add_clause(x, value_x ^ 1, y, value_y ^ 1);
  }

  vector <int> solve() {
    vector <int> res(n);
    SCC = Strongly_Connected_Components(g);
    vector <int> c = SCC.find_scc();
    for (int i = 0; i < n; ++i) {
      if (c[2 * i] == c[2 * i + 1]) {
        return vector <int>();
      }
      res[i] = c[2 * i] < c[2 * i + 1];
    }
    return res;
  }
};

template <typename T>
vector <T> dijkstra(const digraph <T> &g, int s, vector <int> &parent) {
  parent.assign(g.n, -1);
  vector <T> dist(g.n, numeric_limits <T>::max());
  priority_queue <pair <T, int>, vector <pair <T, int>>, greater <pair <T, int>>> q;

  dist[s] = 0;
  q.push(make_pair(0, 0));
  while (!q.empty()) {
    auto [W, v] = q.top();
    q.pop();
    if (W > dist[v]) {
      continue;
    }
    for (int id : g.adj[v]) {
      auto &e = g.edges[id];
      int to = e.to;
      if (dist[to] > dist[v] + e.cost) {
        dist[to] = dist[v] + e.cost;
        q.push(make_pair(dist[to], to));
        parent[to] = v;
      }
    }
  }

  return dist;
}

template <typename T>
vector <vector <T>> Floyd_Warshall(const vector <vector <T>> &adj_matrix) { // we assume that there is no cycles with negative weight
  const T INF = numeric_limits <T>::max();
  int n = (int)adj_matrix.size();
  vector <vector <T>> res = adj_matrix;
  for (int mid = 0; mid < n; ++mid) {
    for (int from = 0; from < n; ++from) {
      for (int to = 0; to < n; ++to) {
        if (res[from][mid] < INF && res[mid][to] < INF) {
          res[from][to] = min(res[from][to], res[from][mid] + res[mid][to]);
        }
      }
    }
  }
  return res;
}

void run_case() {

}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
