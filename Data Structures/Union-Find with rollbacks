#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

class Dsu {
public:
  vector <int> saves;
  vector <int> parent;
  vector <int> weight;
  vector <pair <int, int>> ops;
  int connected_components;

  explicit Dsu(int n) : connected_components(n) {
    parent.resize(n);
    weight.assign(n, 1);
    iota(parent.begin(), parent.end(), 0);
  }

  int get(int v) {
    while (parent[v] != v) {
      v = parent[v];
    }
    return v;
  }

  void unite(int x, int y) {
    x = get(x);
    y = get(y);
    if (x != y) {
      if (weight[x] > weight[y])
        swap(x, y);
      connected_components -= 1;
      ops.emplace_back(x, parent[x]);
      parent[x] = y;
      ops.emplace_back(~y, weight[y]);
      weight[y] += weight[x];
    }
  }

  void save() {
    int t = (int)ops.size();
    saves.emplace_back(t);
  }

  void rollback() {
    int t = saves.back();
    saves.pop_back();
    while ((int)ops.size() > t) {
      int i = ops.back().first;
      int j = ops.back().second;
      ops.pop_back();
      if (i >= 0) {
        parent[i] = j;
        connected_components += 1;
      } else {
        weight[~i] = j;
      }
    }
  }
};

void run_case() {

}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
