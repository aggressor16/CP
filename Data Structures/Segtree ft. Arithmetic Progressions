#include <bits/stdc++.h>

class Segtree {
public:
  struct node {
    int64_t sum = 0;
    int64_t a = 0;
    int64_t d = 0;

    void apply(int l, int r, const int64_t &A, const int64_t &D, int shift) {
      a += A + D * shift;
      d += D;
      sum += ((2 * (A + D * shift) + D * (r - l)) * (r - l + 1)) >> 1;
    }
  };

  int n;
  std::vector <node> tree;

  void push(int x, int l, int r) {
    if (tree[x].a != 0 || tree[x].d != 0) {
      int mid = (l + r) >> 1;
      int z = x + ((mid - l + 1) << 1);
      tree[x + 1].apply(l, mid, tree[x].a, tree[x].d, 0);
      tree[z].apply(mid + 1, r, tree[x].a, tree[x].d, mid + 1 - l);
      tree[x].a = tree[x].d = 0;
    }
  }

  inline void pull(int x, int z) {
    tree[x] = unite(tree[x + 1], tree[z]);
  }

  node unite(const node &lhs, const node &rhs) const {
    node res;
    res.sum = lhs.sum + rhs.sum;
    return res;
  }

  template <typename T>
  void build(int x, int l, int r, const std::vector <T> &v) {
    if (l == r) {
      tree[x].apply(l, r, v[l]);
      return;
    }
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    build(x + 1, l, mid, v);
    build(z, mid + 1, r, v);
    pull(x, z);
  }

  Segtree(){};
  explicit Segtree(int _n) : n(_n) {
    tree.resize(2 * n - 1);
  }

  template <typename T>
  explicit Segtree(const std::vector <T> &v) {
    n = static_cast <int> (v.size());
    tree.resize(2 * n - 1);
    build(0, 0, n - 1, v);
  }

  template <typename ...T>
  void modify(int x, int l, int r, int ql, int qr, const T&...v) {
    if (ql <= l && r <= qr) {
      tree[x].apply(l, r, v..., l - ql);
      return;
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    if (ql <= mid) {
      modify(x + 1, l, mid, ql, qr, v...);
    }
    if (qr > mid) {
      modify(z, mid + 1, r, ql, qr, v...);
    }
    pull(x, z);
  }

  node get(int x, int l, int r, int ql, int qr) {
    if (ql <= l && r <= qr) {
      return tree[x];
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    node res{};
    if (qr <= mid) {
      res = get(x + 1, l, mid, ql, qr);
    } else if (ql > mid) {
      res = get(z, mid + 1, r, ql, qr);
    } else {
      res = unite(get(x + 1, l, mid, ql, qr), get(z, mid + 1, r, ql, qr));
    }
    return res;
  }

  int find_first_knowingly(int x, int l, int r, const std::function <bool(const node&)> &F) {
    if (l == r) {
      return r;
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    int res;
    if (F(tree[x + 1])) {
      res = find_first_knowingly(x + 1, l, mid, F);
    } else {
      res = find_first_knowingly(z, mid + 1, r, F);
    }
    return res;
  }

  int find_first(int x, int l, int r, int ql, int qr, const std::function <bool(const node &)> &F) {
    if (ql <= l && r <= qr) {
      if (!F(tree[x])) {
        return -1;
      }
      return find_first_knowingly(x, l, r, F);
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    int res = -1;
    if (ql <= mid) {
      res = find_first(x + 1, l, mid, ql, qr, F);
    }
    if (qr > mid && res == -1) {
      res = find_first(z, mid + 1, r, ql, qr, F);
    }
    return res;
  }

  int find_last_knowingly(int x, int l, int r, const std::function <bool(const node&)> &F) {
    if (l == r) {
      return r;
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    int res;
    if (F(tree[z])) {
      res = find_last_knowingly(z, mid + 1, r, F);
    } else {
      res = find_last_knowingly(x + 1, l, mid, F);
    }
    return res;
  }

  int find_last(int x, int l, int r, int ql, int qr, const std::function <bool(const node&)> &F) {
    if (ql <= l && r <= qr) {
      if (!F(tree[x])) {
        return -1;
      }
      return find_last_knowingly(x, l, r, F);
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    int res = -1;
    if (qr > mid) {
      res = find_last(z, mid + 1, r, ql, qr, F);
    }
    if (ql <= mid && res == -1) {
      res = find_last(x + 1, l, mid, ql, qr, F);
    }
    return res;
  }

  template <typename ...T>
  void modify(int l, int r, const T& ...v) {
    assert(0 <= l && l <= r && r <= n - 1);
    modify(0, 0, n - 1, l, r, v...);
  }

  node get(int l, int r) {
    assert(0 <= l && l <= r && r <= n - 1);
    return get(0, 0, n - 1, l, r);
  }

  node get(int p) {
    assert(0 <= p && p <= n - 1);
    return get(0, 0, n - 1, p, p);
  }

  int find_first(int l, int r, const std::function <bool(const node&)> &F) {
    assert(0 <= l && l <= r && r <= n - 1);
    return find_first(0, 0, n - 1, l, r, F);
  }

  int find_last(int l, int r, const std::function <bool(const node&)> &F) {
    assert(0 <= l && l <= r && r <= n - 1);
    return find_last(0, 0, n - 1, l, r, F);
  }
};

void solve() {
  int n, q;
  std::cin >> n >> q;

  Segtree st(n);
  while (q--) {
    int type;
    std::cin >> type;
    if (type == 1) {
      int l, r, a, d;
      std::cin >> l >> r >> a >> d;
      --l; --r;
      st.modify(l, r, a, d);
    } else {
      int pos;
      std::cin >> pos;
      Segtree::node res = st.get(pos - 1);
      std::cout << res.sum << "\n";
    }
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int tt = 1;
  //std::cin >> tt;
  while (tt--) {
    solve();
  }
  return 0;
}
