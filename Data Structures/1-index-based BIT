#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

/*Same as 0-index-based, but with one more feature:
if we have an array consists from non-negative numbers, we can binary search the first index i such that a[0] + a[1] + ... + a[i] >= S in O(log(n)).*/

template <typename T>
class Fenwick {
public:
  int n;
  int max_log;
  vector <T> tree;

  explicit Fenwick(int _n) : n(_n) {
    max_log = 32 - __builtin_clz(n);
    tree.assign(n + 1, 0);
  }

  void modify(int p, T v) {
    while (p <= n) {
      tree[p] += v;
      p += p & -p;
    }
  }

  T get(int p) {
    T res{};
    while (p > 0) {
      res += tree[p];
      p -= p & -p;
    }
    return res;
  }

  T get(int l, int r) {
    return get(r) - get(l - 1);
  }

  int lower_bound(T s) {
    int res = 0;
    for (int k = max_log - 1; k >= 0; --k) {
      if (res + (1 << k) <= n && tree[res + (1 << k)] < s) {
        res += (1 << k);
        s -= tree[res];
      }
    }
    return res + 1;
  }
};


void run_case() {

}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
