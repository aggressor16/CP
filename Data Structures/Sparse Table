#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

/*Data Structure which allows process queries like F(a[l], a[l + 1], ...,, [r])
in O(1) with O(n * log(n)) time precalculation and O(n * log(n)) memory.
Note: F must be idempotent, because segments which we combine to get an answer might intersect each other.*/

template <typename T, class Fun = function<T(const T& a, const T& b)>>
class SparseTable {
public:
  int n;
  vector <vector <T>> mat;
  Fun func;

  SparseTable(const vector <T>& a, const Fun& F) : func(F) {
    n = (int)a.size();
    int max_log = 32 - __builtin_clz(n);
    mat.resize(max_log);
    mat[0] = a;
    for (int j = 1; j < max_log; j++) {
      mat[j].resize(n - (1 << j) + 1);
      for (int i = 0; i <= n - (1 << j); i++) {
        mat[j][i] = func(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);
      }
    }
  }

  T get(int l, int r) const {
    assert(0 <= l && l <= r && r <= n - 1);
    int lg = 32 - __builtin_clz(r - l + 1) - 1;
    return func(mat[lg][l], mat[lg][r - (1 << lg) + 1]);
  }
};

void run_case() {

}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
