#include <bits/stdc++.h>

/*Standart lazy segment tree.
It's worth to be noticed, that provided implementation allows to change few lines of code only,
if you want to handle with really non-standard lazy modifications.
Example: https://codeforces.com/contest/145/submission/169454220
*/

class Node {
public:
  int mn = 0;
  int mx = 0;
  int64_t sum = 0;
  Node(int x = 0) : mn(x), mx(x), sum(x){};

  friend Node operator + (const Node &lhs, const Node &rhs) {
    Node res;
    res.mn = std::min(lhs.mn, rhs.mn);
    res.mx = std::max(lhs.mx, rhs.mx);
    res.sum = lhs.sum + rhs.sum;
    return res;
  }
};

void apply(Node &v, const int &value, int l, int r) {
  v.mn += value;
  v.mx += value;
  v.sum += value * 1LL * (r - l + 1);
}

void apply(int &lhs, const int &rhs) {
  lhs += rhs;
}

template <class Node, class Tag = int>
class Lazy_Segtree {
public:
  int n;
  std::vector <Tag> tag;
  std::vector <Node> tree;

  void apply(int x, int l, int r, const Tag &T) {
    ::apply(tag[x], T);
    ::apply(tree[x], T, l, r);
  }

  void push(int x, int l, int r) {
    if (tag[x] != Tag()) {
      int mid = (l + r) >> 1;
      int z = x + ((mid - l + 1) << 1);
      apply(x + 1, l, mid, tag[x]);
      apply(z, mid + 1, r, tag[x]);
      tag[x] = Tag();
    }
  }

  inline void pull(int x, int z) {
    tree[x] = tree[x + 1] + tree[z];
  }

  void build(int x, int l, int r, const std::vector <int> &v) {
    if (l == r) {
      tree[x].sum = v[r];
      return;
    }
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    build(x + 1, l, mid, v);
    build(z, mid + 1, r, v);
    pull(x, z);
  }

  Lazy_Segtree(){};
  explicit Lazy_Segtree(int _n) : n(_n) {
    tag.resize(2 * n - 1);
    tree.resize(2 * n - 1);
  }

  explicit Lazy_Segtree(const std::vector <int> &v) {
    n = static_cast <int> (v.size());
    tag.resize(2 * n - 1);
    tree.resize(2 * n - 1);
    build(0, 0, n - 1, v);
  }

  void modify(int x, int l, int r, int ql, int qr, const Tag &T) {
    if (ql <= l && r <= qr) {
      apply(x, l, r, T);
      return;
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    if (ql <= mid) {
      modify(x + 1, l, mid, ql, qr, T);
    }
    if (qr > mid) {
      modify(z, mid + 1, r, ql, qr, T);
    }
    pull(x, z);
  }

  Node get(int x, int l, int r, int ql, int qr) {
    if (ql <= l && r <= qr) {
      return tree[x];
    }
    push(x, l, r);
    int mid = (l + r) >> 1;
    int z = x + ((mid - l + 1) << 1);
    Node res{};
    if (qr <= mid) {
      res = get(x + 1, l, mid, ql, qr);
    } else if (ql > mid) {
      res = get(z, mid + 1, r, ql, qr);
    } else {
      res = get(x + 1, l, mid, ql, qr) + get(z, mid + 1, r, ql, qr);
    }
    return res;
  }

  template <typename ...M>
  void modify(int l, int r, const M&... Args) {
    assert(0 <= l && l <= r && r <= n - 1);
    Tag T = Tag(Args...);
    modify(0, 0, n - 1, l, r, T);
  }

  Node get(int l, int r) {
    assert(0 <= l && l <= r && r <= n - 1);
    return get(0, 0, n - 1, l, r);
  }

  Node get(int p) {
    assert(0 <= p && p <= n - 1);
    return get(0, 0, n - 1, p, p);
  }
};

void run_case() {
  int n, q;
  cin >> n >> q;

  Segtree st(n);
  while (q--) {
    int type, l, r;
    cin >> type >> l >> r;
    if (type == 1) {
      int value;
      cin >> value;
      st.modify(l, r - 1, value);
    } else {
      Segtree::node res = st.get(l, r - 1);
      cout << res.mn << "\n";
    }
  }
}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
