#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

class Dsu {
public:
  vector <int> parent;
  vector <int> weight;
  int connected_components;
  
  Dsu(int n) {
    parent.resize(n);
    weight.assign(n, 1);
    connected_components = n;
    iota(parent.begin(), parent.end(), 0);
  }
  
  inline int get(int v) {
    if (parent[v] == v) {
      return v;
    }
    return parent[v] = get(parent[v]);
  }
  
  inline void unite(int x, int y) {
    x = get(x);
    y = get(y);
    if (x != y) {
      if (weight[x] > weight[y]) {
        swap(x, y);
      }
      parent[x] = y;
      weight[y] += weight[x];
      connected_components -= 1;
    }
  }
  
  bool connected(int u, int v) {
    return get(u) == get(v);
  }
};

void run_case() {

}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;

  while (test_cases--) {
    run_case();
  }

  return 0;
}
