#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) 42
#endif

template <const int alphabet = 26, bool separator = true>
class Suffix_Array {
public:
  int n;
  string s;
  vector <int> lcp;
  vector <int> order;
  vector <int> class_id;

  static constexpr int LOWER = 97; //'a';

  Suffix_Array(const string &_s = "") {
    if (_s != "") {
      build(_s);
    }
  }

  inline int index(const char &X) {
    return X - LOWER;
  }

  void build(const string &_s) {
    s = _s;
    if (separator) {
      for (auto &x : s) {
        x += 1;
      }
      s.push_back(LOWER);
    }
    n = (int)s.size();
    order.resize(n);
    class_id.resize(n);

    int cnt_size = max(n, alphabet + separator);

    vector <int> cnt(cnt_size);
    for (int i = 0; i < n; ++i) {
      cnt[index(s[i])] += 1;
    }

    for (int i = 1; i < cnt_size; ++i) {
      cnt[i] += cnt[i - 1];
    }

    for (int i = 0; i < n; ++i) {
      order[cnt[index(s[i])] -= 1] = i;
    }

    class_id[order[0]] = 0;
    int classes_count = 1;
    for (int i = 1; i < n; ++i) {
      if (s[order[i]] != s[order[i - 1]]) {
        classes_count += 1;
      }
      class_id[order[i]] = classes_count - 1;
    }

    int length = 1;
    vector <int> new_order(n);
    vector <int> new_class_id(n);

    while (length < n) {
      for (int i = 0; i < n; ++i) {
        new_order[i] = order[i] - length;
        if (new_order[i] < 0) {
          new_order[i] += n;
        }
      }

      fill(cnt.begin(), cnt.begin() + classes_count, 0);
      for (int i = 0; i < n; ++i) {
        cnt[class_id[new_order[i]]] += 1;
      }
      for (int i = 1; i < classes_count; ++i) {
        cnt[i] += cnt[i - 1];
      }
      for (int i = n - 1; i >= 0; --i) {
        order[cnt[class_id[new_order[i]]] -= 1] = new_order[i];
      }

      new_class_id[order[0]] = 0;
      classes_count = 1;
      for (int i = 1; i < n; ++i) {
        int middle_1 = order[i] + length;
        int middle_2 = order[i - 1] + length;
        if (n <= middle_1) {
          middle_1 -= n;
        }
        if (n <= middle_2) {
          middle_2 -= n;
        }
        if (class_id[order[i]] != class_id[order[i - 1]]
            || class_id[middle_1] != class_id[middle_2]) {
          classes_count += 1;
        }
        new_class_id[order[i]] = classes_count - 1;
      }

      length <<= 1;
      copy(new_class_id.begin(), new_class_id.end(), class_id.begin());
    }

    if (separator) {
      n -= 1;
      class_id.pop_back();
      order.erase(order.begin());
    }
  }

  void build_lcp() {
    lcp.resize(n);
    vector <int> rev_order(n);
    for (int i = 0; i < n; ++i) {
      rev_order[order[i]] = i;
    }

    int LCP = 0;
    for (int i = 0; i < n; ++i) {
      int p = rev_order[i];
      if (p == n - 1) {
        lcp[p] = LCP = 0;
      } else {
        int q = order[p + 1];
        LCP = max(LCP - 1, 0);
        while (i + LCP < n && q + LCP < n && s[i + LCP] == s[q + LCP]) {
          LCP += 1;
        }
        lcp[p] = LCP;
      }
    }

    for (int i = 0; i < n - 1; ++i) {
      lcp[i] = min(lcp[i], n - max(order[i], order[i + 1]));
    }
  }
};

void run_case() {
  string s;
  cin >> s;

  int n = (int)s.size();
  Suffix_Array S(s);
  S.build_lcp();

  long long ans = n - S.order[0];
  for (int i = 1; i < n; ++i) {
    ans += n - S.order[i] - S.lcp[i - 1];
  }

  cout << ans << "\n";
}

int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int test_cases = 1;
  //cin >> test_cases;
  while (test_cases--) {
    run_case();
  }

  return 0;
}
