#include <bits/stdc++.h>

template <const int E = 26>
class AhoCorasick {
private:
  struct node {
    int occurences = 0;
    int parentChar = -1;
    bool terminal = false;
    std::shared_ptr <node> parent = nullptr;
    std::shared_ptr <node> suffixLink = nullptr;
    std::array <std::shared_ptr <node>, E> next = {nullptr};

    int leftmostOccurence = std::numeric_limits <int>::max();
    int rightmostOccurence = std::numeric_limits <int>::min();
    std::vector <std::shared_ptr <node>> incomingSuffixLinks = {};

    node(const std::shared_ptr <node> &parent, int parentChar) {
      this->parentChar = parentChar;
      this->parent = parent;
    }
  };

  std::shared_ptr <node> root = std::make_shared <node>(node(nullptr, -1));
  std::shared_ptr <node> state = root;

  std::vector <std::string> dictionary;
  std::vector <std::shared_ptr <node>> terminalNodes;

  inline int index(const char &C) {
    return C - 'a';
  }

  void build() {
    int n = (int)dictionary.size();
    terminalNodes.resize(n);
    for (int i = 0; i < n; ++i) {
      insert(dictionary[i], i);
    }

    std::queue <std::shared_ptr <node>> q;
    q.push(this->root);
    while (!q.empty()) {
      std::shared_ptr <node> v = q.front();
      q.pop();
      for (std::shared_ptr <node> &child : v->next) {
        if (child != nullptr) {
          q.push(child);
          findSuffixLink(child);
          child->suffixLink->incomingSuffixLinks.emplace_back(child);
        }
      }
    }
  }

  void insert(const std::string &s, int id) {
    std::shared_ptr <node> currentNode = this->root;
    for (char C : s) {
      int num = index(C);
      if (currentNode->next[num] == nullptr) {
        currentNode->next[num] = std::make_shared <node>(node(currentNode, num));
      }
      currentNode = currentNode->next[num];
    }
    currentNode->terminal = true;
    terminalNodes[id] = currentNode;
  }

  void findSuffixLink(std::shared_ptr <node> &v) {
    std::shared_ptr <node> p = v->parent->suffixLink;
    while (p != nullptr) {
      if (p->next[v->parentChar] != nullptr) {
        v->suffixLink = p->next[v->parentChar];
        return;
      }
      p = p->suffixLink;
    }
    v->suffixLink = this->root;
  }

  void findTransition(int nextChar) {
    if (state->next[nextChar] != nullptr) {
      state = state->next[nextChar];
      return;
    }
    std::shared_ptr <node> current = state;
    while (current->suffixLink != nullptr) {
      current = current->suffixLink;
      if (current->next[nextChar] != nullptr) {
        state = current->next[nextChar];
        return;
      }
    }
    state = current;
  }

  void pullInfo(std::shared_ptr <node> &v) {
    for (std::shared_ptr <node> &child : v->incomingSuffixLinks) {
      pullInfo(child);
      v->occurences += child->occurences;
      v->leftmostOccurence = std::min(v->leftmostOccurence, child->leftmostOccurence);
      v->rightmostOccurence = std::max(v->rightmostOccurence, child->rightmostOccurence);
    }
  }

  void process(const std::string &text) {
    for (int i = 0; i < text.length(); ++i) {
      int id = index(text[i]);
      findTransition(id);
      state->occurences += 1;
      state->leftmostOccurence = std::min(state->leftmostOccurence, i);
      state->rightmostOccurence = std::max(state->rightmostOccurence, i);
    }
    pullInfo(this->root);
  }

public:
  AhoCorasick(std::vector <std::string> dict) {
    dictionary = std::move(dict);
    this->build();
  }

  std::vector <std::pair <int, int>> getInfo(const std::string &text) {
    process(text);
    int n = (int)dictionary.size();
    std::vector <std::pair <int, int>> result(n);
    for (int i = 0; i < n; ++i) {
      std::shared_ptr <node> &v = terminalNodes[i];
      if (v->leftmostOccurence == std::numeric_limits <int>::max()) {
        result[i] = std::make_pair(-1, -1);
      } else {
        result[i] = std::make_pair(v->leftmostOccurence, v->rightmostOccurence);
        result[i].first -= (int)dictionary[i].size() - 1;
        result[i].second -= (int)dictionary[i].size() - 1;
      }
    }
    return result;
  }
};

class Task {
private:
public:
  void solveOne() {
    int n;
    std::cin >> n;

    std::vector <std::string> dict(n);
    for (std::string &s : dict) {
      std::cin >> s;
    }

    std::string text;
    std::cin >> text;
    AhoCorasick Aho(dict);
    for (auto &[l, r] : Aho.getInfo(text)) {
      std::cout << l << " " << r << "\n";
    }
  }

  void solve() {
    int tt = 1;
    //std::cin >> tt;
    for (int i = 0; i < tt; ++i) {
      solveOne();
    }
  }
};

void solve() {

}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  Task Solver = Task();
  Solver.solve();
  return 0;
}
